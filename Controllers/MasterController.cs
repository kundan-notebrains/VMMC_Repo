using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using VMMC.IServices;
using VMMC.Models;

namespace VMMC.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class MasterController : Controller
    {
        private readonly IMaster _imaster;
        public MasterController(IMaster master)
        {
            _imaster = master;

        }
        #region Access Level Controller
        [HttpPost]
        [Route("CreateUpdateAccessLevel")]
        public async Task<IActionResult> CreateUpdateAccessLevel([FromBody] AccessLevel accessLevel)
        {
            string clientSchema = HttpContext.User.Claims.ElementAt(1).Value;
            string usernames = HttpContext.User.Claims.ElementAt(0).Value;
            if (ModelState.IsValid)
            {
                var result = await _imaster.CreateUpdateAccessLevel(accessLevel);
                return Ok(result);
            }
            return BadRequest();
        }
        [HttpGet]
        [Route("GetAccessLevelId")]
        public async Task<IActionResult> AccessLevelId()
        {
            if (ModelState.IsValid)
            {
                var result = await _imaster.AutoGeneratedAccessid();
                return Ok(result);
            }
            return BadRequest();
        }
        [HttpGet]
        [Route("AccessLevelList")]
        public async Task<IActionResult> GetAccessLevel()
        {
            if (ModelState.IsValid)
            {
                var result = await _imaster.GetAccrssLevel();
                return Ok(result);
            }
            return BadRequest();
        }
        [HttpGet]
        [Route("AccessLevelEdit")]
        public async Task<IActionResult> AccessLevelEdit(int id)
        {
            if (ModelState.IsValid)
            {
                var result = await _imaster.AccessLevelEdit(id);
                return Ok(result);
            }
            return BadRequest();
        }
        [HttpDelete]
        [Route("AccessLevelDelete")]
        public async Task<IActionResult> AccessLevelDelete(int id)
        {
            if (ModelState.IsValid)
            {
                var delete = await _imaster.AccessLevelDelete(id);
                return Ok(delete);
            }
            return BadRequest();
        }
        #endregion
        #region Roles Controller
        [HttpPost]
        [Route("CreateUpdateRoles")]
        public async Task<IActionResult> CreateUpdateRoles([FromBody] Role _role)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest();

            }
            else
            {
                var rolesResult = await _imaster.CreateUpdateRoles(_role!);
                if (rolesResult == true)
                    return Ok(rolesResult);
                return BadRequest();

            }
        }
        [HttpGet]
        [Route("GetRoleId")]
        public async Task<IActionResult> GetRoleId()
        {
            if (ModelState.IsValid)
            {
                var roleResult = await _imaster.AutoGeneratedRoleId();
                return Ok(roleResult);
            }
            return BadRequest();
        }
        [HttpGet]
        [Route("Roledetails")]
        public async Task<IActionResult> Roledetails()
        {
            var roleList = await _imaster.RolesDetails();
            if (roleList == null)
                return BadRequest();
            return Ok(roleList);
        }
        [HttpGet]
        [Route("RoleEdit")]
        public async Task<IActionResult> RoleEdit(int id)
        {
            var roleList = await _imaster.RolesEdit(id);
            if (roleList == null)
                return BadRequest();
            return Ok(roleList);
        }
        [HttpDelete]
        [Route("RoleDelete")]
        public async Task<IActionResult> RoleDelete(int id)
        {
            var roleList = await _imaster.Rolesdelete(id);
            if (roleList == false)
                return BadRequest();
            return Ok(roleList);
        }
        #endregion
    }
}
