using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.EntityFrameworkCore;
using VMMC.IServices;
using VMMC.Models;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace VMMC.Services
{
    public class MasterService : IMaster
    {
        private readonly VmmcContext _context;
        public MasterService(VmmcContext context)
        {
            _context = context;
        }
        #region Access Level Method
        public async Task<bool> CreateUpdateAccessLevel(AccessLevel _accessLevel)
        {
            if (_accessLevel.Accessid > 0)
            {
                var _accessLevelUpdate = await AccessLevelUpdate(_accessLevel);
                return _accessLevelUpdate;
            }
            else
            {
                _accessLevel.Status = true;
                _accessLevel.Isdeleted = false;
                _accessLevel.Accesslevelid!.Trim();
                _accessLevel.Createddate = DateTime.Now;
                await _context.AccessLevels.AddAsync(_accessLevel);
                var accessLevel = await _context.SaveChangesAsync();
                return accessLevel > 0;
            }


        }
        public async Task<bool> AccessLevelUpdate(AccessLevel _accessLevel)
        {
            var accessData = await _context.AccessLevels.Where(x => x.Accessid == _accessLevel.Accessid && x.Isdeleted == false && x.Status == true).FirstOrDefaultAsync();
            if (accessData != null)
            {
                accessData.Levelname = _accessLevel.Levelname;
                accessData.Levelstatus = _accessLevel.Levelstatus;
                accessData.Updateddate = DateTime.Now;

                _context.Update(accessData);
                await _context.SaveChangesAsync();

                return true;
            }
            else
            {
                return false;
            }
        }

        public async Task<string> AutoGeneratedAccessid()
        {
            var id = await Task.Run(() => GenerateAccessId());
            return id;
        }
        public string GenerateAccessId()
        {
            Random random = new Random();
            int randomNumber = random.Next(1000, 9999);
            return $"L{randomNumber:D4}";
        }
        public async Task<List<AccessLevel>> GetAccrssLevel()
        {
            var accessList = await _context.AccessLevels.FromSqlRaw($"exec usp_accessLevel_get").ToListAsync();
            return accessList;

        }
        public async Task<AccessLevel> AccessLevelEdit(int id)
        {
            var accessEdit = await _context.AccessLevels.Where(x => x.Accessid == id && x.Isdeleted == false && x.Status == true).FirstOrDefaultAsync();

            return accessEdit!;
        }
        public async Task<bool> AccessLevelDelete(int id)
        {
            var accessDelete = await _context.AccessLevels.Where(x => x.Accessid == id && x.Isdeleted == false && x.Status == true).FirstOrDefaultAsync();
            if (accessDelete != null)
            {
                accessDelete.Isdeleted = true;
                accessDelete.Status = false;

                _context.Update(accessDelete);
                await _context.SaveChangesAsync();

                return true;
            }
            else
            {
                return false;
            }

        }
        #endregion
        #region Role All Method
        public async Task<bool> CreateUpdateRoles(Role _role)
        {
            if (_role == null)
                return false;
            var roleParameter = $"usp_role_create_update @id='{_role.Id}',@rolename='{_role.Rolename}',@rolestatus='{_role.Rolestatus}',@roleid='{_role.Roleid}',@moduleid='{_role.Moduleid}'";
            await _context.Database.ExecuteSqlRawAsync(roleParameter);
            return true;
        }
        public async Task<List<Role>> RolesDetails()
        {
            var rolesList = await _context.Roles.FromSqlRaw($"exec usp_roles_get").ToListAsync();
            return rolesList;
        }
        public async Task<Role> RolesEdit(int id)
        {
            var roleEdit=await _context.Roles.Where(x=>x.Id==id && x.Isdeleted==false && x.Status==true).FirstOrDefaultAsync();
            //var role = await _context.Roles.FromSqlRaw($"exec usp_roles_edit '{id}'").FirstOrDefaultAsync();
            return roleEdit!;
        }
        public async Task<bool> Rolesdelete(int id)
        {
            var dataList = await _context.Database.ExecuteSqlRawAsync($"usp_roles_Delete '{id}'");
            if (dataList > 0)
                return true;
            return false;
        }
        public async Task<string> AutoGeneratedRoleId()
        {
            var roleId = await Task.Run(() => GenerateRoleId());
            return roleId;
        }
        public string GenerateRoleId()
        {
            Random random = new Random();
            int randomNumber = random.Next(1000, 9999);
            return $"R{randomNumber:D4}";
        }
        #endregion
    }
}
